CREATE TABLE visitor (
    id INTEGER,
    lastName TEXT,
    firstName TEXT,
    companyName TEXT,
    visitorId TEXT,
    arrivingDate TEXT,
    arrivingTime TEXT,
    departingDate TEXT,
    departingTime TEXT,
    vehicleNo TEXT,
    visitorNo TEXT PRIMARY KEY,
    phoneNumber TEXT,
    requester TEXT,
    noOfVisitors TEXT,
    remarks TEXT,
    history TEXT,
    status TEXT,
    profilePhoto BLOB
);


DROP TABLE IF EXISTS user;

CREATE TABLE user (
    id INTEGER,
    username TEXT UNIQUE NOT NULL PRIMARY KEY,
    password TEXT NOT NULL,
	name TEXT,
	telephoneNo TEXT
    email TEXT,
    level TEXT CHECK(level IN ('Admin', 'Approver', 'Requester', 'Gate'))
);

<!-- <div class="form-sections">
    <h4 class="input-head">Name</h4>
    {{ form.name(class="login-input") }}
</div>
<br>
<div class="form-sections">
    <h4 class="input-head">Telephone Number</h4>
    {{ form.telephoneNo(class="login-input") }}
</div> -->


            {{ form.hidden_tag() }}


                    <div class="container">
                        <div class="enterDetail">
                            <label for="requester">Requester</label>
                            <input type="text" id="requester" name="requester">
                        </div>
                    </div>

                    
        // function openOutlook() {
        //         var subject = "Visitor Approval - {{ visitor.visitorNo }}";
        //         var body = "Last Name: {{ visitor.lastName }}\n" +
        //             "First Name: {{ visitor.firstName }}\n" +
        //             "Company Name: {{ visitor.companyName }}\n" +
        //             "Visitor ID: {{ visitor.visitorId }}\n" +
        //             "Arriving Date: {{ visitor.arrivingDate }}\n" +
        //             "Arriving Time: {{ visitor.arrivingTime }}"
        //             // Add other fields as needed

        //         var outlookLink = "https://outlook.office.com/mail/compose?subject=" + encodeURIComponent(subject) +
        //             "&body=" + encodeURIComponent(body);

        //         // Open Outlook website in a new tab or window
        //         window.open(outlookLink, '_blank');
        //     }


DROP TABLE IF EXISTS visitor;

CREATE TABLE visitor (
    id INTEGER UNIQUE,
    lastName TEXT,
    firstName TEXT,
    companyName TEXT,
    visitorId TEXT,
    arrivingDate TEXT,
    arrivingTime TEXT,
    departingDate TEXT,
    departingTime TEXT,
    vehicleNo TEXT,
    visitorNo TEXT PRIMARY KEY,
    phoneNumber TEXT,
	emailAddress TEXT,
    requester TEXT,
    noOfVisitors TEXT,
    remarks TEXT,
    history TEXT,
    status TEXT,
	requestTime TEXT,
	approver TEXT,
    approvedTime TEXT,
	arrivalOfficer TEXT,
    arrivedTime TEXT,
	departureOfficer TEXT,
    departedTime TEXT,
    profilePhoto BLOB
);


                    <input type="submit"name="btn-approve" value="Approve">
                    <input type="submit" name="btn-reject" value="Reject">

                    
                    <input type="submit" class="btn-approve accessed" id="approve" name="changeStatus" value="Approve">
                    <input type="submit" class="btn-reject" id="reject" name="changeStatus" value="Reject">

                    
# @app.route('/approve_reject_visitor', methods=['POST'])
# @login_required
# def approve_reject_visitor():
#     visitor_no = request.form.get('visitor_no')
#     action = request.form.get('action')  # 'approve' or 'reject'

#     # Retrieve the visitor based on the visitor_no
#     visitor = Visitor.query.filter_by(visitorNo=visitor_no).first()

#     if visitor:
#         # Update the status based on the action
#         if action == 'approve':
#             visitor.status = 'Approved'
#             visitor.approvedTime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
#             flash(f'Visitor {visitor_no} has been approved!', 'success')
#         elif action == 'reject':
#             visitor.status = 'Rejected'
#             flash(f'Visitor {visitor_no} has been rejected!', 'danger')

#         # Commit the changes to the database
#         try:
#             db.session.commit()
#         except Exception as e:
#             flash(f'Error updating status: {str(e)}', 'danger')

#         return redirect(url_for('dashboard'))

#     return jsonify({'error': 'Visitor not found'}), 404
# @app.route('/filledForm', methods=['GET', 'POST'])
# def filledForm():
#     # Assuming you want the second record ordered by id
#     # getVisitor = 
#     global global_visitorNo
#     visitor_no_to_search = global_visitorNo
#     getVisitor = Visitor.query.filter_by(visitorNo=visitor_no_to_search).first()
#     if getVisitor:
#         lastName      = getVisitor.lastName
#         firstName     = getVisitor.firstName
#         companyName   = getVisitor.companyName
#         visitorId     = getVisitor.visitorId
#         arrivingDate  = getVisitor.arrivingDate
#         arrivingTime  = getVisitor.arrivingTime
#         departingDate = getVisitor.departingDate
#         departingTime = getVisitor.departingTime
#         vehicleNo     = getVisitor.vehicleNo
#         visitorNo     = getVisitor.visitorNo
#         phoneNumber   = getVisitor.phoneNumber
#         emailAddress  = getVisitor.emailAddress
#         requester     = getVisitor.requester
#         noOfVisitors  = getVisitor.noOfVisitors
#         remarks       = getVisitor.remarks
#         history       = getVisitor.history
#         status        = getVisitor.status
#     else:
#         lastName = ""

#     return render_template('filledForm.html',
#                            lastName=lastName,
#                            firstName=firstName,
#                            companyName=companyName,
#                            visitorId=visitorId,
#                            arrivingDate=arrivingDate,
#                            arrivingTime=arrivingTime,
#                            departingDate=departingDate,
#                            departingTime=departingTime,
#                            vehicleNo=vehicleNo,
#                            visitorNo=visitorNo,
#                            phoneNumber=phoneNumber,
#                            emailAddress=emailAddress,
#                            requester=requester,
#                            noOfVisitors=noOfVisitors,
#                            remarks=remarks,
#                            history=history,
#                            status=status)


                <!-- <tr style="cursor: pointer;" onclick="if(event.target.tagName !== 'INPUT') window.location='{{ url_for('get_user_by_username', user_id=user.id) }}';"> -->

                
    <!-- <div class="content login">
        <form method="POST" action="" class="login-details">
            <div class="logo-wrapper">
                <img class="logo-image" src="{{ url_for('static', filename='logo.jpg') }}" alt="Dayartne Holdings Logo">
            </div>
            {{ form.hidden_tag() }}
            <div class="twosections">
                <div class="section">
                    <div class="form-sections">
                        <h4 class="input-head">User Id</h4>
                        <input type="text" id="history" name="history" value="{{ user.username }}">
                    </div>
                    <br>
                    <div class="form-sections">
                        <h4 class="input-head">Password</h4>
                        <input type="text" id="history" name="history" value="{{ user.password }}">
                    </div>
                    <br>
                    <div class="form-sections">
                        <h4 class="input-head">E-mail</h4>
                        <input type="text" id="history" name="history" value="{{ user.email }}">
                    </div>
                </div>
                <div class="section">
                    <div class="form-sections">
                        <h4 class="input-head">Name</h4>
                        <input type="text" id="history" name="history" value="{{ user.name }}">
                    </div>
                    <br>
                    <div class="form-sections">
                        <h4 class="input-head">Telephone Number</h4>
                        <input type="text" id="history" name="history" value="{{ user.telephoneNo }}">
                    </div>
                    <br>
                    <div class="form-sections">
                        <h4 class="input-head">User Level</h4>
                        <input type="text" id="history" name="history" value="{{ user.level }}">
                    </div>
                </div>
            </div>
            <div class="form-sections submit">
                <input type="submit" class="login-btn" value="Update">
            </div>
        </form>
    </div> -->
    
                    <input type="button" class="btn-help" id="help" value="Help?">



                    
        if 'pic' in request.files:
            pic = request.files['pic']

            # Check file size
            max_file_size = 100 * 1024  # 100KB
            if pic and len(pic.read()) > max_file_size:
                return render_template('newvisitor.html', 
                                    requester=current_user.username, 
                                    visitorNo=visitor_code,
                                    error_message='File size exceeds the maximum limit (100KB)')

            # Reset file pointer after reading
            pic.seek(0)
            filename = secure_filename(pic.filename)